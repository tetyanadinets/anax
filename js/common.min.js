(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c="function"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error("Cannot find module '"+i+"'");throw a.code="MODULE_NOT_FOUND",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u="function"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()({1:[function(require,module,exports){
'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

module.exports = function () {
	function Common() {
		_classCallCheck(this, Common);
	}

	_createClass(Common, [{
		key: 'init',
		value: function init() {
			this.scrollWindow();
			this.langCtrl();
			if ($(window).innerWidth() >= 1200) {
				this.animCtrl();
			}
			this.tagsCtrl();
		}
	}, {
		key: 'scrollWindow',
		value: function scrollWindow() {
			$(window).scroll(function () {
				if ($(window).scrollTop() > 150) {
					$('body').addClass('scroll');
				} else {
					$('body').removeClass('scroll');
				}
			});
		}
	}, {
		key: 'langCtrl',
		value: function langCtrl() {
			if ($(window).innerWidth() <= 1200) {
				$('.header__lang').on('click', function () {
					$(this).toggleClass('active');
				});
			}
		}
	}, {
		key: 'tagsCtrl',
		value: function tagsCtrl() {
			$('.viev-all_tags').on('click', function (e) {
				e.preventDefault();

				if (!$(this).parent('.tags').hasClass('show')) {
					$(this).parent('.tags').addClass('show');
					$('.tags__top').animate({ height: $('.tags__top').get(0).scrollHeight }, 500);
				} else {
					$(this).parent('.tags').removeClass('show');
					$('.tags__top').animate({ height: '22px' }, 500);
				}
			});
		}
	}, {
		key: 'animCtrl',
		value: function animCtrl() {
			if ($('.anim-fragment').length > 0) {
				anime({
					targets: '#fragment, .fragment-path',
					d: [{ value: 'M265.915 615.86C257.099 631.754 250.604 649.251 246.846 668.089C228.46 761.298 287.658 853.864 379.929 876.36C477.032 900.047 574.436 839.559 596.592 742.376C600.317 726.037 601.713 709.703 600.873 693.755C598.305 642.585 620.548 593.319 660.775 561.767C706.982 525.582 741.32 473.526 754.528 411.275C783.384 274.887 697.617 138.654 562.064 105.741C421.275 71.4542 280.165 159.12 248.036 300.044C234.444 360.058 242.805 419.981 267.969 471.384C290.37 517.233 290.604 571.182 265.915 615.86Z' }, { value: 'M 256.8314208984375 608.7157592773438 C 248.3165740966797 624.4254150390625 242.04342651367188 641.7194213867188 238.41380310058594 660.3388671875 C 220.65586853027344 752.4666137695312 277.8316345214844 843.9588012695312 366.9507141113281 866.19384765625 C 460.7367248535156 889.6060180664062 554.8134155273438 829.8197631835938 576.2125244140625 733.7640991210938 C 579.810302734375 717.6146850585938 581.1586303710938 701.4701538085938 580.3472900390625 685.7071533203125 C 577.8670043945312 635.1307373046875 599.3502197265625 586.4362182617188 638.203125 555.2503051757812 C 682.8316650390625 519.4850463867188 715.9966430664062 468.03289794921875 728.7535400390625 406.5040283203125 C 756.623779296875 271.69818115234375 673.78662109375 137.04556274414062 542.8640747070312 104.51435852050781 C 406.8843688964844 70.62529754638672 270.5946350097656 157.27413940429688 239.56314086914062 296.5633850097656 C 226.43545532226562 355.8811950683594 234.51083374023438 415.1090393066406 258.81524658203125 465.915771484375 C 280.4510192871094 511.2328186035156 280.6770324707031 564.5560302734375 256.8314208984375 608.7157592773438 Z ' },
					// { value: 'M 251.43582153320312 671.0894165039062 C 243.099853515625 688.4087524414062 236.95849609375 707.474853515625 233.40512084960938 728.0022583007812 C 216.020263671875 829.5701293945312 271.9948425292969 930.437255859375 359.24169921875 954.9506225585938 C 451.05743408203125 980.7618408203125 543.15771484375 914.8494262695312 564.1072387695312 808.951171875 C 567.6294555664062 791.1469116210938 568.949462890625 773.34814453125 568.1551513671875 755.969970703125 C 565.7269897460938 700.2110595703125 586.7588500976562 646.5269775390625 624.7955322265625 612.1455078125 C 668.4865112304688 572.7154541015625 700.9547729492188 515.9910888671875 713.4436645507812 448.15753173828125 C 740.7283935546875 299.5384521484375 659.6314697265625 151.0883026123047 531.4594116210938 115.22369384765625 C 398.3363952636719 77.86210632324219 264.9098815917969 173.3896484375 234.5303192138672 326.9515075683594 C 221.6784210205078 392.3475036621094 229.5841522216797 457.6442565917969 253.3779754638672 513.6570434570312 C 274.5592041015625 563.6176147460938 274.7804870605469 622.40478515625 251.43582153320312 671.0894165039062 Z ' },
					{ value: 'M 287.86956787109375 651.04052734375 C 278.3257141113281 667.8424682617188 271.29443359375 686.3389282226562 267.2261962890625 706.2531127929688 C 247.32220458984375 804.78662109375 311.40765380859375 902.6403198242188 411.2968444824219 926.4213256835938 C 516.4169311523438 951.46142578125 621.86279296875 887.5181884765625 645.8479614257812 784.7836303710938 C 649.8805541992188 767.5112915039062 651.391845703125 750.2442626953125 650.482421875 733.38525390625 C 647.702392578125 679.2921142578125 671.7818603515625 627.2118530273438 715.3302001953125 593.8576049804688 C 765.3521118164062 555.6055297851562 802.5250854492188 500.5757751464844 816.8236694335938 434.7687683105469 C 848.06201171875 290.5896911621094 755.2139282226562 146.57452392578125 608.4693603515625 111.78138732910156 C 456.05645751953125 75.53598022460938 303.29608154296875 168.20960998535156 268.5144348144531 317.18377685546875 C 253.8002471923828 380.6260681152344 262.8515319824219 443.9720764160156 290.0931701660156 498.31146240234375 C 314.3435974121094 546.7794189453125 314.5969543457031 603.8103637695312 287.86956787109375 651.04052734375 Z ' }],

					duration: 10000,
					direction: 'alternate',
					loop: true,
					easing: 'linear'
				});
			};

			if ($('.anim-fragment-pages').length > 0) {
				anime({
					targets: '#fragment-about, .fragment-path_about_1',
					d: [{ value: 'M814.735 481.606C933.343 456.913 822.435 386.326 886.657 348.98C986.01 291.205 1059.56 146.128 1021.83 36.375C988.45 -60.7557 841.018 -140.052 742.647 -123.97C632.206 -105.915 563.215 17.8565 556.064 88.1458C546.398 183.165 521.583 240.294 397.807 247.966C299.918 254.033 209.973 287.507 158.942 325.525C66.717 394.231 6.74209 510.271 60.3812 651.66C114.02 793.048 320.476 862.503 466.757 812.056C613.038 761.609 657.511 650.424 672.567 595.208C686.029 545.986 766.689 498.847 814.735 481.606Z' }, { value: 'M 847.7921142578125 525.8495483398438 C 971.2125854492188 498.8880615234375 855.8046264648438 421.81646728515625 922.6322021484375 381.0396423339844 C 1026.0164794921875 317.9570007324219 1102.55078125 159.55227661132812 1063.2899169921875 39.716636657714844 C 1028.555419921875 -66.33712768554688 875.1415405273438 -152.91810607910156 772.7792358398438 -135.3587188720703 C 657.857177734375 -115.64508056640625 586.0669555664062 19.496891021728516 578.6259155273438 96.2434310913086 C 568.567626953125 199.99176025390625 542.7457275390625 262.3689880371094 413.94769287109375 270.7458190917969 C 312.0868835449219 277.37017822265625 218.4925079345703 313.9192810058594 165.39096069335938 355.4299011230469 C 69.42402648925781 430.44769287109375 7.015686988830566 557.1478881835938 62.83115768432617 711.5258178710938 C 118.64630126953125 865.9025268554688 333.47906494140625 941.73828125 485.6952209472656 886.6569213867188 C 637.9114990234375 831.5755004882812 684.18896484375 710.17626953125 699.8558959960938 649.8878173828125 C 713.864013671875 596.1439208984375 797.7966918945312 544.6744384765625 847.7921142578125 525.8495483398438 Z ' }, { value: 'M 847.7921142578125 525.8495483398438 C 971.2125854492188 498.8880615234375 855.8046264648438 421.81646728515625 922.6322021484375 381.0396423339844 C 1026.0164794921875 317.9570007324219 1102.55078125 159.55227661132812 1063.2899169921875 39.716636657714844 C 1028.555419921875 -66.33712768554688 875.1415405273438 -152.91810607910156 772.7792358398438 -135.3587188720703 C 657.857177734375 -115.64508056640625 586.0669555664062 19.496891021728516 578.6259155273438 96.2434310913086 C 568.567626953125 199.99176025390625 542.7457275390625 262.3689880371094 413.94769287109375 270.7458190917969 C 312.0868835449219 277.37017822265625 218.4925079345703 313.9192810058594 165.39096069335938 355.4299011230469 C 69.42402648925781 430.44769287109375 7.015686988830566 557.1478881835938 62.83115768432617 711.5258178710938 C 118.64630126953125 865.9025268554688 333.47906494140625 941.73828125 485.6952209472656 886.6569213867188 C 637.9114990234375 831.5755004882812 684.18896484375 710.17626953125 699.8558959960938 649.8878173828125 C 713.864013671875 596.1439208984375 797.7966918945312 544.6744384765625 847.7921142578125 525.8495483398438 Z ' }],

					duration: 10000,
					direction: 'alternate',
					loop: true,
					easing: 'linear'
				});
				anime({
					targets: '#fragment-about-2, .fragment-path_about_2',
					d: [{ value: 'M102.837 294.559C109.616 289.348 155.986 264.785 179.072 239.158C214.786 199.512 226.697 124.941 194.439 81.782C165.89 43.587 96.4717 9.66284 35.1165 24.3536C-15.4115 36.452 -106.384 81.782 -79.3836 161.854C-65.2151 203.873 -18.5018 254.19 -55.4178 268.467C-92.3338 282.743 -132.832 312.616 -149.992 336.667C-181.003 380.132 -183.488 439.768 -143.194 490.274C-102.899 540.78 -3.67906 583.834 51.6853 501.853C68.5945 478.826 61.8466 415.527 51.6853 377.354C41.524 339.18 84.0464 309.002 102.837 294.559Z' }, { value: 'M 111.34014892578125 275.5110778808594 C 118.67967224121094 270.6370544433594 168.88380432128906 247.66244506835938 193.8787078857422 223.69264221191406 C 232.5457305908203 186.61038208007812 245.4416046142578 116.86158752441406 210.51632690429688 76.49349212646484 C 179.6067352294922 40.76841354370117 104.44853210449219 9.037983894348145 38.02013397216797 22.778751373291016 C -16.68581199645996 34.09479904174805 -115.1804428100586 76.49349212646484 -85.9474868774414 151.3875732421875 C -70.60746002197266 190.68939208984375 -20.031635284423828 237.75259399414062 -60.00006103515625 251.1063690185547 C -99.96849060058594 264.4591979980469 -143.8153076171875 292.4004211425781 -162.39419555664062 314.8961486816406 C -195.96937561035156 355.5504455566406 -198.6598358154297 411.33001708984375 -155.0341033935547 458.57000732421875 C -111.40727996826172 505.8100280761719 -3.983267068862915 546.079833984375 55.95893478393555 469.4002380371094 C 74.26628112792969 447.8623046875 66.9604263305664 388.6565856933594 55.95893478393555 352.95208740234375 C 44.95743942260742 317.24664306640625 90.99583435058594 289.0201110839844 111.34014892578125 275.5110778808594 Z ' }, { value: 'M 111.34014892578125 275.5110778808594 C 118.67967224121094 270.6370544433594 168.88380432128906 247.66244506835938 193.8787078857422 223.69264221191406 C 232.5457305908203 186.61038208007812 245.4416046142578 116.86158752441406 210.51632690429688 76.49349212646484 C 179.6067352294922 40.76841354370117 104.44853210449219 9.037983894348145 38.02013397216797 22.778751373291016 C -16.68581199645996 34.09479904174805 -115.1804428100586 76.49349212646484 -85.9474868774414 151.3875732421875 C -70.60746002197266 190.68939208984375 -20.031635284423828 237.75259399414062 -60.00006103515625 251.1063690185547 C -99.96849060058594 264.4591979980469 -143.8153076171875 292.4004211425781 -162.39419555664062 314.8961486816406 C -195.96937561035156 355.5504455566406 -198.6598358154297 411.33001708984375 -155.0341033935547 458.57000732421875 C -111.40727996826172 505.8100280761719 -3.983267068862915 546.079833984375 55.95893478393555 469.4002380371094 C 74.26628112792969 447.8623046875 66.9604263305664 388.6565856933594 55.95893478393555 352.95208740234375 C 44.95743942260742 317.24664306640625 90.99583435058594 289.0201110839844 111.34014892578125 275.5110778808594 Z ' }],

					duration: 10000,
					direction: 'alternate',
					loop: true,
					easing: 'linear'
				});
				anime({
					targets: '#fragment-about-3, .fragment-path_about_3',
					d: [{ value: 'M460.937 415.22C499.712 365.069 537.433 380.827 588.946 351.906C680.674 300.406 688.898 169.17 643.847 78.9921C603.978 -0.814843 492.575 -15.5987 420.836 16.0156C340.294 51.5091 307.002 172.958 312.246 236.256C319.336 321.824 309.269 376.636 217.102 405.327C144.21 428.018 81.4558 473.489 48.7299 516.079C-10.4124 593.046 -18.3531 697.607 43.4857 812.885C105.324 928.163 251.782 961.362 354.446 890.935C457.111 820.508 436.021 682.646 439.019 631.251C441.721 585.428 405.283 487.202 460.937 415.22Z' }, { value: 'M 414.6837463378906 377.96392822265625 C 449.5678405761719 332.3127746582031 483.503662109375 346.6568603515625 529.8475341796875 320.3308410644531 C 612.3709716796875 273.4517517089844 619.769775390625 153.99102783203125 579.2394409179688 71.90444946289062 C 543.3711547851562 -0.741730272769928 443.1470031738281 -14.199089050292969 378.6067199707031 14.578582763671875 C 306.1468200683594 46.887386322021484 276.195556640625 157.43914794921875 280.913330078125 215.0576629638672 C 287.2918701171875 292.947998046875 278.23504638671875 342.8419189453125 195.316650390625 368.95855712890625 C 129.7390899658203 389.6136169433594 73.28202819824219 431.0046691894531 43.84004211425781 469.773193359375 C -9.367555618286133 539.8342895507812 -16.511436462402344 635.013427734375 39.12207794189453 739.9479370117188 C 94.75514221191406 844.882568359375 226.5166473388672 875.1027221679688 318.87872314453125 810.9948120117188 C 411.2416687011719 746.886962890625 392.2679748535156 621.3948364257812 394.96514892578125 574.6112670898438 C 397.39599609375 532.8997802734375 364.6144104003906 443.4872131347656 414.6837463378906 377.96392822265625 Z ' }, { value: 'M 488.5928649902344 354.3852844238281 C 529.6943969726562 311.5820007324219 569.6785888671875 325.03125 624.2823486328125 300.3475341796875 C 721.513916015625 256.3929138183594 730.2314453125 144.38455200195312 682.4773559570312 67.41880798339844 C 640.21630859375 -0.6954586505889893 522.129150390625 -13.313302040100098 446.0858459472656 13.669121742248535 C 360.7113952636719 43.96239471435547 325.42193603515625 147.61756896972656 330.9805603027344 201.6416473388672 C 338.49591064453125 274.67291259765625 327.8249206542969 321.45428466796875 230.12796020507812 345.9416809082031 C 152.8625030517578 365.3082275390625 86.34310150146484 404.1171569824219 51.65365982055664 440.4671630859375 C -11.03713607788086 506.1576232910156 -19.45427131652832 595.399169921875 46.094810485839844 693.7874755859375 C 111.64336395263672 792.1759643554688 266.88873291015625 820.5108642578125 375.7125244140625 760.4022216796875 C 484.5373229980469 700.2936401367188 462.1819763183594 582.630126953125 465.3598327636719 538.7650756835938 C 468.22393798828125 499.65570068359375 429.59967041015625 415.82098388671875 488.5928649902344 354.3852844238281 Z ' }],

					duration: 10000,
					direction: 'alternate',
					loop: true,
					easing: 'linear'
				});
				anime({
					targets: '#fragment-about-4, .fragment-path_about_4',
					d: [{ value: 'M233.078 319.017C206.978 267.459 233.07 237.072 228.469 180.124C220.277 78.7186 118.551 30.8451 30.4744 45.2807C-47.4725 58.0561 -99.2011 157.526 -99.7034 234.18C-100.267 320.24 -15.3348 388.518 37.0317 403.01C107.823 422.6 147.932 448.786 137.775 543.615C129.742 618.612 143.513 691.123 165.75 734.718C205.938 813.504 286.489 852.943 400.603 830.523C514.718 808.103 593.701 681.549 574.333 564.137C554.964 446.725 437.446 424.187 397.527 405.647C361.947 389.089 270.54 393.019 233.078 319.017Z' }, { value: 'M 268.13165283203125 319.0169982910156 C 238.10633850097656 267.4590148925781 268.1224365234375 237.07200622558594 262.8294677734375 180.12399291992188 C 253.40542602539062 78.71859741210938 136.3804168701172 30.84510040283203 35.057579040527344 45.28070068359375 C -54.612098693847656 58.05609893798828 -114.12039947509766 157.5260009765625 -114.69823455810547 234.17999267578125 C -115.34659576416016 320.239990234375 -17.641069412231445 388.51800537109375 42.6010627746582 403.010009765625 C 124.03897857666016 422.6000061035156 170.18016052246094 448.7860107421875 158.49559020996094 543.614990234375 C 149.25448608398438 618.6119995117188 165.0965576171875 691.1229858398438 190.67787170410156 734.718017578125 C 236.90992736816406 813.5040283203125 329.57537841796875 852.9429931640625 460.8514709472656 830.5230102539062 C 592.1287231445312 808.10302734375 682.9902954101562 681.5490112304688 660.70947265625 564.1370239257812 C 638.427490234375 446.7250061035156 503.2354736328125 424.18701171875 457.3128662109375 405.6470031738281 C 416.3818054199219 389.0889892578125 311.22772216796875 393.0190124511719 268.13165283203125 319.0169982910156 Z ' }, { value: 'M 230.58740234375 317.0635681152344 C 204.76629638671875 265.8212890625 230.57948303222656 235.620361328125 226.02764892578125 179.02105712890625 C 217.9231719970703 78.23658752441406 117.2842025756836 30.65622901916504 30.14876365661621 45.00343704223633 C -46.965213775634766 57.70060729980469 -98.14105987548828 156.56143188476562 -98.63798522949219 232.7460479736328 C -99.19556427001953 318.2790832519531 -15.170930862426758 386.1390075683594 36.63599395751953 400.5422668457031 C 106.67083740234375 420.0123291015625 146.35125732421875 446.0379943847656 136.3027801513672 540.2863159179688 C 128.35562133789062 614.8240966796875 141.97946166992188 686.8910522460938 163.9788360595703 730.2191772460938 C 203.73741149902344 808.5227661132812 283.42767333984375 847.72021484375 396.322265625 825.4375 C 509.2178649902344 803.15478515625 587.3568115234375 677.375732421875 568.19580078125 560.6826782226562 C 549.0338134765625 443.9895935058594 432.7715759277344 421.589599609375 393.2791442871094 403.1631164550781 C 358.079345703125 386.7065124511719 267.64910888671875 390.6124572753906 230.58740234375 317.0635681152344 Z ' }],

					duration: 10000,
					direction: 'alternate',
					loop: true,
					easing: 'linear'
				});
			};
			if ($('.anim-fragment-pages_contacts').length > 0) {
				anime({
					targets: '#fragment-contacts, .fragment-path-cont',
					d: [{ value: 'M485.078 319.017C458.978 267.459 485.07 237.072 480.469 180.124C472.277 78.7186 370.551 30.8451 282.474 45.2807C204.527 58.0561 152.799 157.526 152.297 234.18C151.733 320.24 236.665 388.518 289.032 403.01C359.823 422.6 399.932 448.786 389.775 543.615C381.742 618.612 395.513 691.123 417.75 734.718C457.938 813.504 538.489 852.943 652.603 830.523C766.718 808.103 845.701 681.549 826.333 564.137C806.964 446.725 689.446 424.187 649.527 405.647C613.947 389.089 522.54 393.019 485.078 319.017Z' }, { value: 'M 519.6029663085938 327.73486328125 C 491.6452941894531 274.7679443359375 519.5944213867188 243.55055236816406 514.6658935546875 185.04629516601562 C 505.890869140625 80.86976623535156 396.9245910644531 31.68801498413086 302.57879638671875 46.518104553222656 C 219.08399963378906 59.64262008666992 163.67431640625 161.83078002929688 163.13658142089844 240.5795135498047 C 162.53245544433594 328.99127197265625 253.5093994140625 399.1351623535156 309.60357666015625 414.0232238769531 C 385.43304443359375 434.1485290527344 428.39678955078125 461.0501403808594 417.516845703125 558.4705200195312 C 408.912109375 635.5169677734375 423.66326904296875 710.0095825195312 447.4829406738281 754.7958984375 C 490.5312805175781 835.7349243164062 576.8154296875 876.2516479492188 699.0513916015625 853.218994140625 C 821.2884521484375 830.1863403320312 905.8929443359375 700.1739501953125 885.146484375 579.5534057617188 C 864.3988647460938 458.9328308105469 738.5166015625 435.7789001464844 695.7564086914062 416.7322692871094 C 657.6441040039062 399.72174072265625 559.7312622070312 403.7591552734375 519.6029663085938 327.73486328125 Z ' }, { value: 'M 563.366943359375 327.73486328125 C 533.0545043945312 274.7679443359375 563.357666015625 243.55055236816406 558.0140380859375 185.04629516601562 C 548.4999389648438 80.86976623535156 430.35589599609375 31.688016891479492 328.0637512207031 46.518104553222656 C 237.53652954101562 59.64262008666992 177.4599151611328 161.83078002929688 176.87689208984375 240.5795135498047 C 176.22189331054688 328.99127197265625 274.8614196777344 399.1351623535156 335.68017578125 414.0232238769531 C 417.8964538574219 434.1485290527344 464.4788513183594 461.0501403808594 452.6825256347656 558.4705200195312 C 443.3530578613281 635.5169677734375 459.3466491699219 710.0095825195312 485.17254638671875 754.7958984375 C 531.8466796875 835.7349243164062 625.398193359375 876.2516479492188 757.9295654296875 853.218994140625 C 890.4620971679688 830.1863403320312 982.1925048828125 700.1739501953125 959.6986694335938 579.5534057617188 C 937.2035522460938 458.9328308105469 800.71875 435.7789001464844 754.3570556640625 416.7322692871094 C 713.03466796875 399.72174072265625 606.8750610351562 403.7591552734375 563.366943359375 327.73486328125 Z' }],

					duration: 10000,
					direction: 'alternate',
					loop: true,
					easing: 'linear'
				});
			};
		}
	}]);

	return Common;
}();

},{}],2:[function(require,module,exports){
'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

module.exports = function () {
	function ValidForm(form) {
		_classCallCheck(this, ValidForm);

		this.form = $(form);
	}

	_createClass(ValidForm, [{
		key: 'init',
		value: function init() {
			this.start();
			this.events();
		}
	}, {
		key: 'start',
		value: function start() {
			var form = this.form;
			var input = form.find('.form-item input');
			var select = form.find('.form-item select');

			// if(jQuery().inputmask) {
			// 	var tel = $('input[type="tel"], .tel');
			// 	if(tel.length == 0) return;
			// 	tel.inputmask("(999) (999 99 99)", {
			// 		showMaskOnHover: false,
			// 	});
			// }

			for (var i = 0; i < select.length; i++) {
				if (select[i].options[select[i].selectedIndex].text) {
					var parent = $(select[i]).closest('.form-item');
					parent.addClass('active');
				}
			};

			for (var i = 0; i < input.length; i++) {
				if (input[i].value) {
					$(input[i]).closest('.form-item').addClass('active');
				}
			};
		}
	}, {
		key: 'events',
		value: function events() {
			var form = this.form;
			var validItem = form.find('.valid');
			var self = this;
			var phone = $('.contact-form .form-item input[type="tel"]');

			form.on('click', '[type="submit"]', function (e) {
				var btn = $(this);
				var form = btn.closest('form');

				if (!self.validInput(form)) {
					e.preventDefault();
				} else {
					//	e.preventDefault();
					if (form.hasClass('ajax')) {
						self.sendAjax(form);
					} else {
						self.thankForm(form, function () {
							form.submit();
						});
					}
				}

				if (phone.val().charAt(0) !== '+') {
					phone.val('+' + phone.val());
				}

				var parent = phone.closest('.valid');
				parent.removeClass('error');
				if (!self.isPhone(phone.val()) || phone.val().length != 13) {
					// console.log(self.isPhone(phone.val()), phone.val().length)
					parent.addClass('error').removeClass('ok');
				};
			});

			form.on('focus', 'input, textarea', function () {
				$(this).closest('.valid').removeClass('error');
			});

			form.on('blur', 'input, textarea', self.checkLengthInput);

			this.checkSelect(form);

			phone.on('focus', function () {
				var parent = phone.closest('.valid');
				parent.removeClass('error');
				if ($(this).val().charAt(0) !== '+') {
					$(this).val('+' + $(this).val());
				}
			});

			// Restricts input for the set of matched elements to the given inputFilter function.
			(function ($) {
				$.fn.inputFilter = function (inputFilter) {
					return this.on("input keydown keyup mousedown mouseup select contextmenu drop", function () {
						if (!this.value) {
							this.value = "+";
						}
						if (inputFilter(this.value.substring(1))) {
							this.oldValue = this.value;
							this.oldSelectionStart = this.selectionStart;
							this.oldSelectionEnd = this.selectionEnd;
						} else if (this.hasOwnProperty("oldValue")) {
							this.value = this.oldValue;
							this.setSelectionRange(this.oldSelectionStart, this.oldSelectionEnd);
						} else {
							this.value = "+";
						}
					});
				};
			})(jQuery);

			phone.inputFilter(function (value) {
				return (/^\d*$/.test(value)
				); // Allow digits only, using a RegExp
			});
		}
	}, {
		key: 'checkLengthInput',
		value: function checkLengthInput() {
			var input = $(this);
			var parent = input.closest('.form-item');
			if (input.val().length > 0) {
				parent.addClass('active');
			} else {
				parent.removeClass('active');
			}
		}
	}, {
		key: 'checkSelect',
		value: function checkSelect(form) {
			var select = form.find('select');
			select.on('change', function (e) {
				var _this = $(this);
				var parent = _this.closest('.form-item, .filters__item');
				var val = _this.val();
				_this.closest('.valid').removeClass('error');
				if (val != 0) {
					parent.addClass('active');
				} else {
					parent.removeClass('active');
				}
			});

			select.on('focus', function (e) {
				$(this).closest('.form-item, .filters__item').addClass('open');
			});
			select.on('change', function (e) {
				$(this).closest('.form-item, .filters__item').removeClass('open');
			});
		}
	}, {
		key: 'sendAjax',
		value: function sendAjax(form) {
			var _this2 = this;

			var data = form.serialize();
			$.ajax({
				type: "POST",
				url: "mail.php",
				data: data,
				success: function success(e) {
					_this2.thankForm(form);
				}
			});
		}
	}, {
		key: 'thankForm',
		value: function thankForm(form, callBack) {
			var formThanks = $('.formThanks');
			if (!formThanks.length) return;

			formThanks.fadeIn();
			setTimeout(function () {
				formThanks.fadeOut(function () {
					form.fadeIn().find('.form-item').removeClass('active');
					form[0].reset();
					callBack();
					//	formTitle.fadeIn();
				});
			}, 3000);
		}
	}, {
		key: 'validInput',
		value: function validInput(form) {
			var formValid = form.find('.valid');
			var email = formValid.find('[type=email]');
			var bull = void 0;
			var textInError = '';

			bull = false;

			formValid.each(function (key) {
				var _this = $(formValid[key]);
				var formInput = _this.find('input');
				var formTextarea = _this.find('textarea');
				var select = _this.find('select');
				var formCheckbox = _this.find('[type="checkbox"]');

				checkForElem(formInput, function () {
					if (formInput.val().length < 1) {
						formInput.closest('.valid').addClass('error').removeClass('ok');
					} else {
						_this.closest('.valid').addClass('ok');
					};
				});
				checkForElem(formTextarea, function () {
					if (formTextarea.val().length < 1) {
						formTextarea.closest('.valid').addClass('error').removeClass('ok');
					} else {
						_this.closest('.valid').addClass('ok');
					};
				});
				checkForElem(select, function () {
					if (select.val() == 0) {
						select.closest('.valid').addClass('error').removeClass('ok');
					} else {
						_this.closest('.valid').addClass('ok');
					};
				});
				if (!formCheckbox.prop("checked")) {
					formCheckbox.closest('.valid').addClass('error').removeClass('ok');
				} else {
					_this.closest('.valid').removeClass('error').addClass('ok');
				};
			});

			//	проверка на email
			if (email.length && !this.isEmail(email) && email.val().length > 1) {
				var parent = email.closest('.valid');
				parent.addClass('error').removeClass('ok');
				textInError += 'E-mail не корректен';
			};

			function checkForElem(input, f) {
				if (!input.length) {} else {
					f();
				}
			};

			if (form.find('.error').length) {
				return bull = false;
			} else {
				return bull = true;
			}
		}
	}, {
		key: 'isEmail',
		value: function isEmail(email) {
			if (!email) return true;
			var valEmail = email.val();
			var reg = /^(([^<>()[\]\\.,;:\s@\"]+(\.[^<>()[\]\\.,;:\s@\"]+)*)|(\".+\"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$/;;

			return reg.test(valEmail);
		}
	}, {
		key: 'isPhone',
		value: function isPhone(phone) {
			if (!phone) return true;
			var reg = new RegExp('^[0-9]+$');

			return reg.test(phone.substring(1));
		}
	}]);

	return ValidForm;
}();

},{}],3:[function(require,module,exports){
'use strict';

function libsActivate() {
	// lazyload
	(function () {

		var lazyInit = function lazyInit() {
			// var className  = $(window).innerWidth() >= 480 ? '.lazy' : '.lazy_mob'
			var className = '.lazy';
			$(className).Lazy({
				visibleOnly: true
			});
		};

		$(document).ready(function () {
			lazyInit();
		});

		// new WOW().init();
		AOS.init({
			once: false,
			duration: 500,
			easing: 'easeInBack',
			disable: 'mobile'
		});
	})();

	// swiper slider
	(function () {

		var sliderInstance = null;

		var heroSliderInit = function heroSliderInit(effect, height) {
			if ($('.heroSlider').length) {
				var heroSliderThumbs = new Swiper('.heroSlider', {
					slidesPerView: 1,
					effect: effect,
					autoHeight: height,
					loop: true,
					autoplay: {
						delay: 5000,
						disableOnInteraction: false
					},
					navigation: {
						nextEl: '.heroSlider .arr_next',
						prevEl: '.heroSlider .arr_prev'
					},
					on: {
						init: function init() {
							var totalSlides = this.slides.length - 2;
							$('.slide-num__all').text(totalSlides);
						}
					}
				});

				heroSliderThumbs.on('slideChange', function () {
					var realIndex = heroSliderThumbs.realIndex + 1;
					$('.slide-num__current').text(realIndex);
				});

				sliderInstance = heroSliderThumbs;
			}
		};

		var initOnSize = function initOnSize() {
			if (sliderInstance) {
				sliderInstance.destroy();
			}
			if ($(window).innerWidth() >= 1081) {
				heroSliderInit('fade', false);
			} else {
				heroSliderInit('slide', true);
			}
		};

		initOnSize();

		var industrySliderInit = function industrySliderInit() {

			var industrySliderThumbs = new Swiper('.industrySlider', {
				slidesPerView: 4,
				loop: true,
				autoplay: {
					delay: 5000,
					disableOnInteraction: false
				},
				navigation: {
					nextEl: '.industry .arr_next',
					prevEl: '.industry .arr_prev'
				},
				breakpoints: {
					1020: {
						// autoplay: false,
						slidesPerView: 3

					},
					768: {
						// autoplay: false,
						slidesPerView: 2

					}
				},
				on: {
					init: function init() {
						var totalSlides = $('.industrySlider .swiper-slide:not(.swiper-slide-duplicate)').length;
						$('.slide-num__all').text(totalSlides);
					}
				}
			});

			industrySliderThumbs.on('slideChange', function () {
				var realIndex = industrySliderThumbs.realIndex + 1;
				$('.slide-num__current').text(realIndex);
			});
		};

		industrySliderInit();

		var gallerySliderInit = function gallerySliderInit() {

			var gallerySliderThumbs = new Swiper('.gallerySlider', {
				slidesPerView: 4,
				loop: true,
				autoplay: {
					delay: 5000,
					disableOnInteraction: false
				},
				navigation: {
					nextEl: '.article__gallery-outer .arr_next',
					prevEl: '.article__gallery-outer .arr_prev'
				},
				breakpoints: {
					800: {
						slidesPerView: 3

					},
					600: {
						slidesPerView: 2

					}
				}
			});
		};

		gallerySliderInit();

		$(window).on('resize', function () {
			initOnSize();
		});

		$(document).ready(function () {
			$(".lightgallery").lightGallery({
				selector: '.item'
			});
		});
	})();
}

module.exports = libsActivate();

},{}],4:[function(require,module,exports){
'use strict';

var Preloader = require('./preloader.js');
var Common = require('./common.js');
var Popup = require('./popup.js');
var Nav = require('./nav.js');
var ValidForm = require('./form');

require('./form');
require('./libs-activate');

window.addEventListener('load', function () {
	svg4everybody({});

	var preloader = new Preloader();
	preloader.init();

	var sendForm = new ValidForm('.contact-form').init();
	var subscribeForm = new ValidForm('.subscribe').init();

	var nav = new Nav().init();

	var popup = new Popup().events();
	var common = new Common().init();
	// let scrollAnchors = new Common().scrollAnchors('.anchorBtn', 65, function(){
	// 	$('body').removeClass('openNav')
	// });

});

},{"./common.js":1,"./form":2,"./libs-activate":3,"./nav.js":5,"./popup.js":6,"./preloader.js":7}],5:[function(require,module,exports){
'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

module.exports = function () {
	function Nav() {
		_classCallCheck(this, Nav);

		this.body = $('body');
		this.hamburger = $('#hamburger');
		this.headerNav = $('.headerNav');
	}

	_createClass(Nav, [{
		key: 'init',
		value: function init() {
			this.events();
		}
	}, {
		key: 'events',
		value: function events() {
			var _this = this;

			this.hamburger.on('click', function () {
				if (_this.body.hasClass('openNav')) {
					_this.closeNav();
				} else {
					_this.openNav();
				}
			});

			// this.headerNav.on('click', '.popupBtn', ()=> {
			// 	this.closeNav()
			// })		
		}
	}, {
		key: 'openNav',
		value: function openNav() {
			var _this2 = this;

			var openPromise = new Promise(function (resolve, regect) {
				_this2.body.addClass('openNav');
				setTimeout(resolve, 0);
			});

			openPromise.then(function () {
				_this2.headerNav.addClass('openNav');
			});
		}
	}, {
		key: 'closeNav',
		value: function closeNav() {
			var _this3 = this;

			var closePromise = new Promise(function (resolve, regect) {
				_this3.headerNav.removeClass('openNav');
				setTimeout(resolve, 300);
			});
			closePromise.then(function () {
				_this3.body.removeClass('openNav');
			});
		}
	}]);

	return Nav;
}();

},{}],6:[function(require,module,exports){
'use strict';

// popup windows

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

module.exports = function () {
	function GetPopup() {
		_classCallCheck(this, GetPopup);

		this.$ = jQuery;
		this.popupBtn = $('.popupBtn');
		this.popup = $('.popup');
		this.hash = window.location.hash;

		this.openPopup(this.hash);
	}

	_createClass(GetPopup, [{
		key: 'events',
		value: function events() {
			var _this = this;

			var that = this;

			this.popupBtn.on('click', function (e) {
				e.preventDefault();
				var href = this.getAttribute('href');
				that.openPopup(href);
			});

			this.popup.on('click', '.close, .anchorBtn', function (e) {
				e.preventDefault();
				_this.closePopup();
			});

			document.addEventListener('keydown', function (e) {
				if (e.keyCode === 27) {
					_this.closePopup();
				}
			});
		}
	}, {
		key: 'openPopup',
		value: function openPopup(href) {
			var popup = $(href);

			if (this.popup.hasClass('show_popap')) {
				popup = $('.show_popap');
			};

			if (!popup.length) return;

			document.body.classList.add('hidden');
			setTimeout(function () {
				popup.addClass('show_popup');
			}, 100);
		}
	}, {
		key: 'closePopup',
		value: function closePopup() {
			var loc = window.location;

			this.popup.removeClass('show_popup');
			setTimeout(function () {
				document.body.classList.remove('hidden');
			}, 300);

			history.pushState('', '', loc.pathname + loc.search);
		}
	}]);

	return GetPopup;
}();

},{}],7:[function(require,module,exports){
'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

module.exports = function () {
	function Preloader(loader) {
		_classCallCheck(this, Preloader);

		this.loader = document.querySelector('#preloader');
	}

	_createClass(Preloader, [{
		key: 'init',
		value: function init() {
			var _this = this;

			document.body.classList.add('show');

			if (!this.loader) return;

			this.loader.classList.add('hide');

			setTimeout(function () {
				if (_this.loader.remove) {
					_this.loader.remove();
				};
				_this.loader.classList.add('remove');
			}, 2000);
		}
	}]);

	return Preloader;
}();

},{}]},{},[4]);

//# sourceMappingURL=main.js.map
